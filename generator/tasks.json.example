{
  "tasks": [
    {
      "placeholder_code": "impl LinkedList {\n  pub fn print(&self) {\n    todo!()\n  }\n}\n    ",
      "desc": "<h1>Print List</h1><div><p>The first task is to create a method for printing the linked list which will iteratively travel through the list and print its contents to the terminal in the format:</p><p><code>[value1, value2, value3, â€¦, valueN]</code></p><p>This task is designed to provide you with an opportunity to familiarize yourself with Rust before working with its more complex functionality.</p></div>",
      "task_no": 1
    },
    {
      "placeholder_code": "impl LinkedList {\n  /// Insert a new node into the list at index with val\n  pub fn insert(&mut self, val: i32, index: usize) -> Result<(), String> {\n    todo!()\n  }\n}",
      "desc": "<h1>Insert</h1><div><p>The second task is to create an insert method. This method takes an item to insert into the list and an index to insert it at.</p><p>If given a position in the middle of the list, it is assumed that the elements from then onwards will shift to the right - for example, given the linked list <code>[1, 2, 4, 5]</code> and told to insert 3 at position 2, the list should then become <code>[1, 2, 3, 4, 5]</code>.</p><p>If the given position is outside of the list's bounds, you must handle this by returning a <code>Result::Err</code>.</p></div>",
      "task_no": 2
    },
    {
      "placeholder_code": "impl LinkedList {\n  /// Remove and return the node at the provided index\n  pub fn remove(&mut self, index: usize) -> Result<Box<LinkedListNode>, String> {\n    todo!()\n  }\n}\n",
      "desc": "<h1>Remove</h1><div><p>The third task is to create a remove method. This method takes an index in the list and removes that item from the list, returning it.</p><p>If the given index is in the middle of the list, it is expected that the nodes after it will shift to the left - for example, given list <code>[1, 2, 7, 3, 4]</code> and told to remove position 2, the list should then be <code>[1, 2, 3, 4]</code>.</p><p>If the given index is outside the list' bounds, similar to the previous task, you must handle this by returning a <code>Result::Err</code>.</p></div>",
      "task_no": 3
    },
    {
      "placeholder_code": "impl LinkedList {\n  /// Swap the nodes at indices a and b\n  pub fn swap(&mut self, a: usize, b: usize) -> Result<(), String> {\n    todo!()\n  }\n}\n",
      "desc": "<h1>Swap</h1><div><p>The fourth task is to create a swap method. This method takes two indices into the list and swaps the nodes present at those indices.</p><p>For example, given the list <code>[1, 2, 3, 4]</code> and told to swap positions 1 and 3, the list should then be <code>[1, 4, 3, 2]</code>.</p><p>Note that you cannot mutably access the nodes' values, so you must swap the nodes themselves rather than their values.</p><p>If any one of the given indices is out of bounds, similar to the previous two tasks, you must handle this by returning a <code>Result::Err</code>.</p></div>",
      "task_no": 4
    },
    {
      "placeholder_code": "",
      "fixed": true,
      "desc": "You have finished all of the tasks! Click finish below to take a quick exit survey.",
      "task_no": 5
    }
  ]
}
